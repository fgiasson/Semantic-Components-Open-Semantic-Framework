<?xml version = "1.0" encoding = "utf-8"?>

<!---
  @author Frederick Giasson, Structured Dynamics LLC.
-->

<mx:VBox xmlns:mx = "http://www.adobe.com/2006/mxml" styleName="sGenericBox">
  <mx:Script>
    <![CDATA[
      import com.sd.semantic.core.*;
      
      import mx.containers.HBox;
      import mx.controls.Text;
      import mx.core.Application;
      import mx.events.FlexEvent;

    /** Core varibles shared amongst all semantic controls */
    
    /** 
     * Specifies that this component is a semantic component. If a component in a Flex application is a semantic
     * semantic component, this means that other semantic component can't behave differently depending of the "kind"
     * (semantic or not) of components that are present in the layout. This variable is just to specify is a component
     * is a semantic one or not.
     */
    public var semanticComponent:Boolean = true;
    
    /**
     * Specifies that this control is required within a display cluster.
     * This means that if we have a SemanticHBox that has 2 required semantic
     * components and that these components have removed themselves from the display
     * this means that the parent layout cluster (the smeantic hbox), will remove
     * itself as well. If a semantic component is marked as not required (required=false)
     * it means that it won't be considered by the semantic hbox. So, even if such a semantic
     * component has data in it, its parent cluster can remove itself.
     */
    public var required:Boolean = true;
    
    /**
     * The recordBox attribute specifies if the HBox contains all the controls
     * to display information about a complete record. This mainly used
     * to manage the "GenericBox" generic content attribute display control.
     */
    public var recordBox:Boolean = false;
    
    /** Target record attributes to display in the component */
    public var targetAttributes:Array = [];
    
    /** Target record types to display in the component */
    public var targetTypes:Array = [];
    
    /** Specifies if the sControl's targetAttribute has been bound to a know semantic control. */
    public var bound:Boolean = false;      
  
    private var _semanticDataProvider:Resultset;
    
    /** Input records. This is a Resultset structure (see the structXML XML data structure) */
    public function get semanticDataProvider():Resultset
    {
      return (_semanticDataProvider);
    }      
      
    public function set semanticDataProvider(value:Resultset):void
    {
      _semanticDataProvider = value;
    }
      
    /**
    * Displays unbounded attributes of a given record description. The unbounded attributes are 
    * determined by the parent canvas (HBox, VBox, etc) of this generic tool.
    * 
    * Note: the targetAttributes variable is used as the array of unbounded attributes to process with the
    *       genericBox. Each unbounded attribute is the targetAttribute of a sControl. Then the sControl 
    *       will use that input attribute, and the input record, to try to properly display the value
    *       of the attribute for that record.
    */  
    public function displayGenericAttributes():void
    {
      /** Number of attributes bound to this semantic component */
      var nbBoundAttributes:int = 0;

      for(var i:int = 0; i < targetAttributes.length; i++)
      {
        /** 
        * For each unbound attribute, we create one HBox where the left component is the name
        * of the unbound attribute, and the right component is the value of that componet.
        * The value is displayed using a sControl 
        */
        
        /** HBox of the attribute/value pair */
        var hbox:sHBox = new sHBox();
        hbox.semanticDataProvider = _semanticDataProvider;
        
        /** prefLabel of the unbound attribute */
        var textAttribute:Text = new Text();
        
        /** value of the unbound attribute */
        var textValue:sControl = new sControl();
        
        /** Set the name of the variable */
        textAttribute.text = targetAttributes[i] + ":";

        /** Check for the name of the attribute in the schema structure. */
        var schema:Schema = Application.application.schema;
        
        if(schema)
        {
          /** @TODO use the general settings to get the name of all possible prefLabel attributes */
          
          /** unbound attribute reference in the schema structure */
          var attribute:SchemaAttribute = schema.getAttribute(targetAttributes[i]);

          if(attribute && attribute.prefLabel)
          {
            textAttribute.text = attribute.prefLabel + ":";
          }

          textValue.schema = schema;
        }

        /** Set the value of the variable */
        textValue.targetAttributes = new Array(targetAttributes[i]);
        textValue.semanticDataProvider = semanticDataProvider;
        
        this.addChild(hbox);
        hbox.addChild(textAttribute);
        hbox.addChild(textValue);
        
        nbBoundAttributes++;
      }

      /** If no information has been bound to this control, we simply remove it. */
      if(nbBoundAttributes == 0)
      {
        this.parent.removeChild(this);
      }
    }

    ]]>
  </mx:Script>

  <mx:Text text = "Other information" fontSize = "14"/>
</mx:VBox>